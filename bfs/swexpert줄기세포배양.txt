#include <iostream>
#include <vector>
#include <cstring>


std::pair<int, int> Dir[4] = { {0,1},{1,0},{0,-1},{-1,0} };

struct cell
{
	int level;
	bool is_active;
	bool is_alive;
	int cur_cell_time;
	int x, y;
};

struct cell map[650][650];
std::vector<cell> live_list;

void update_live_list()
{
	for (int i = 0; i < live_list.size(); i++)
	{
		if (live_list[i].level - live_list[i].cur_cell_time == 0)
		{
			live_list[i].is_active = 1;
		}

		if (live_list[i].level * 2 - live_list[i].cur_cell_time == 0)
		{
			live_list[i].is_alive = 0;
		}
		
		live_list[i].cur_cell_time++;
		map[live_list[i].x][live_list[i].y] = live_list[i];
		
	}
}

void bfs_spread()
{
	for (int i = 0; i < live_list.size(); i++)
	{
		if (live_list[i].is_alive == 0)
		{
			live_list.erase(live_list.begin() + i);
		}
		if (live_list[i].is_active == 1 && live_list[i].is_alive == 1)
		{

			for (int j = 0; j < 4; j++)
			{
				int newx = live_list[i].x + Dir[j].first;
				int newy = live_list[i].y + Dir[j].second;

				if (map[newx][newy].level == 0 || (map[newx][newy].level < live_list[i].level && map[newx][newy].cur_cell_time == 0))
				{

					struct cell c = { live_list[i].level, 0,1,0,newx,newy };
					live_list.emplace_back(c);
					map[newx][newy] = c;
				}
			}
		}
	}
}


void print()
{
	for (int i = 295; i < 310; i++)
	{
		for (int j = 295; j < 310; j++)
		{
			std::cout << map[i][j].level << " ";
		}
		std::cout << "\n";
	}
}
int main()
{
	std::ios_base::sync_with_stdio(0);
	std::cin.tie(0);

	int testcase;
	std::cin >> testcase;
	for (int t = 0; t < testcase; t++)
	{
		int N, M, K;
		std::cin >> N >> M >> K;

		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < M; j++)
			{
				int value;
				std::cin >> value;
				if (value > 0)
				{
					struct cell c = { value,0,1,0,300 + i,300 + j };
					live_list.emplace_back(c);
					map[300 + i][300 + j] = c;
				}
			}
		}

		for (int i = 0; i < K+1; i++)
		{
			bfs_spread();
			update_live_list();
	/*		print();
			std::cout << "------------------------" << i << "\n";*/
		}
		int answer = 0;
		for (int i = 0; i < live_list.size(); i++)
		{
			if (live_list[i].is_alive == 1)
			{
				answer++;
			}
		}

		std::cout << "#" << t + 1 << " " << answer<<"\n";
		memset(map, 0, sizeof(map));
		live_list.erase(live_list.begin(), live_list.end());
		
	}
}